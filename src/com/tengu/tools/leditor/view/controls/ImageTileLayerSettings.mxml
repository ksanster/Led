<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx"
		  xmlns:selector="com.tengu.tools.leditor.view.controls.selector.*"
		  addedToStage="onAddedToStage(event)" 
		  removedFromStage="onRemovedFromStage(event)"
		  currentState="{model.selections.selectionState}">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	
	<s:states>
		<s:State name="none"/>
		<s:State name="tile" />
	</s:states>
	
	<fx:Script>
		<![CDATA[
			import com.tengu.scroll.layers.ImageTileLayer;
			import com.tengu.tools.leditor.assets.AssetData;
			import com.tengu.tools.leditor.assets.AssetManager;
			import com.tengu.tools.leditor.assets.api.IAssetData;
			import com.tengu.tools.leditor.model.ActionModel;
			import com.tengu.tools.leditor.model.LedModel;
			import com.tengu.tools.leditor.model.enum.ActionType;
			
			import mx.collections.ArrayCollection;
			import mx.collections.IList;
			
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var model:LedModel = LedModel.instance;
			
			[Bindable]
			private var manager:AssetManager = AssetManager.instance;

			[Bindable]
			private var layer:ImageTileLayer;
			
			[Bindable]
			private var tilesetCollection:ArrayCollection;
			
			[Bindable]
			private var tileCollection:ArrayCollection;
			
			protected function onAddedToStage(event:Event):void
			{
				layer = model.layers.activeLayer as ImageTileLayer;
				tilesetCollection = manager.assetCollection;
				tileCollection = new ArrayCollection();
				
				model.actions.addEventListener(ActionModel.ACTION_CHANGED, onActionChanged);
			}
			
			protected function onRemovedFromStage(event:Event):void
			{
				model.actions.removeEventListener(ActionModel.ACTION_CHANGED, onActionChanged);
			}

			
			protected function onChangeTileset(event:IndexChangeEvent):void
			{
				var tilesetId:String;
				var asset:IAssetData;
				var bitmap:BitmapData;
				var list:Vector.<BitmapData>;
				var count:uint;
				tileCollection.removeAll();
				if (tilesetSelector.selectedIndex == -1)
				{
					return;
				}
				list = manager.getTileList(tilesetSelector.selectedItem.id, layer.tileWidth, layer.tileHeight);
				count = list.length;
				for (var i:int = 0; i < count; i++)
				{
					bitmap = list[i];
					asset = new AssetData(String(i), bitmap, bitmap);
					tileCollection.addItem(asset);
				}
				layer.brush = tilesetSelector.selectedItem.id;
			}
			
			protected function onChangeImage(event:IndexChangeEvent):void
			{
				layer.tileIndex = tileSelector.selectedIndex;
				if (tileSelector.selectedIndex != -1)
				{
					model.actions.actionType = ActionType.DRAW;
				}
			}
			
			private function onActionChanged(event:Event):void
			{
				if (model.actions.actionType != ActionType.DRAW)
				{
					tileSelector.selectedIndex = -1;
				}
			}
			
			protected function onClickAddProperty(event:MouseEvent):void
			{
				model.selections.selectedTile.properties.addItem({key:"", value:""});
			}
			
			protected function onClickRemoveProperty(event:MouseEvent):void
			{
				const properties:IList = model.selections.selectedTile.properties;
				if (propertyList.selectedIndex >= 0 && propertyList.selectedIndex < properties.length)
				{
					properties.removeItemAt(propertyList.selectedIndex);
				}
			}

			
		]]>
	</fx:Script>
	<s:Label text="Set focal index"/>
	<s:TextInput id="zIndexInput" text="@{layer.focalIndexAsString}" 
				 restrict="-[0-9]"
				 widthInChars="5"/>
	<s:Label text="Set tile size"/>
	<s:Form>
		<s:layout>
			<s:HorizontalLayout/>
		</s:layout>
		<s:FormItem label="width:">
			<s:TextInput text="@{layer.tileWidthAsString}" 
						 restrict="[0-9]"
						 widthInChars="3"/>
		</s:FormItem>		
		<s:FormItem label="height:">
			<s:TextInput text="@{layer.tileHeightAsString}"
						 restrict="[0-9]"
						 widthInChars="3"/>
		</s:FormItem>		
	</s:Form>
	<s:Label text="Select tileset"/>
	<s:DropDownList id="tilesetSelector" width="100%"
					dataProvider="{tilesetCollection}"
					labelField="id"
					change="onChangeTileset(event)"/>
	
	<selector:ImageSelector id="tileSelector"
							dataProvider="{tileCollection}" 
							width="100%"
							rowCount="3"
							columnCount="7"
							rowHeight="{layer.tileHeight}"
							columnWidth="{layer.tileWidth}"
							height="{layer.tileHeight * 3 + 15}" 
							change="onChangeImage(event)"/>
	
	<s:Label text="Tile properties" includeIn="tile"/>
	<s:DataGrid id="propertyList" 
				width="100%" height="100"
				dataProvider="{model.selections.selectedTile.properties}" 
				editable="true" 
				includeIn="tile">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="key" headerText="Key"/>
				<s:GridColumn dataField="value" headerText="Value"/>
			</s:ArrayList> 
		</s:columns >
	</s:DataGrid> 
	<s:HGroup includeIn="tile">
		<s:Button label="Add" 
				  includeIn="tile"
				  click="onClickAddProperty(event)"/>
		<s:Button label="Remove" 
				  includeIn="tile"
				  enabled="{propertyList.selectedIndex != -1}" 
				  click="onClickRemoveProperty(event)"/>
	</s:HGroup>		

</s:VGroup>
