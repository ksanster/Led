<?xml version="1.0" encoding="utf-8"?>
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		  xmlns:s="library://ns.adobe.com/flex/spark" 
		  xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Declarations>
		<fx:Component id="defaultRenderer"> 
			<s:DefaultGridItemRenderer /> 
		</fx:Component>
		<fx:Component id="customRenderer">
			<s:GridItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
								xmlns:mx="library://ns.adobe.com/flex/mx" 
								xmlns:s="library://ns.adobe.com/flex/spark">
				
				<s:states> 
					<s:State name="normal"/> 
					<s:State name="hovered"/> 
				</s:states> 
				<s:layout>
					<s:HorizontalLayout verticalAlign="middle" paddingLeft="5" paddingRight="5"/>
				</s:layout>
				<s:Label id="labelDisplay" 
						 color.hovered="#000000"
						 />
				<s:Spacer width="100%"/>
				<s:Button label="remove" click="{outerDocument.onClickRemoveButton(data)}"/>
			</s:GridItemRenderer>
		</fx:Component>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.tengu.tools.leditor.api.IEditableLayer;
			import com.tengu.tools.leditor.logic.api.IEditorController;
			import com.tengu.tools.leditor.model.LayerInfo;
			import com.tengu.tools.leditor.model.LedModel;
			import com.tengu.tools.leditor.model.api.ILedModel;
			
			import spark.events.GridSelectionEvent;
			
			[Inject]
			public var controller:IEditorController;
			
			[Bindable]
			public var model:ILedModel = LedModel.instance;
			
			private function getRenderer(item:Object, column:GridColumn):ClassFactory
			{
				if (item == null) {
					return this["defaultRenderer"];
				}
				return this["customRenderer"];
			}
			
			private function onClickAddButton(event:MouseEvent):void
			{
				const info:LayerInfo = availableList.selectedItem as LayerInfo;
				const zIndex:int = parseInt(zIndexInput.text);
				
				controller.addLayer(info.type, zIndex);
				
				zIndexInput.text = "";
				availableList.selectedIndex = -1
			}
			
			public function onClickRemoveButton(data:Object):void
			{
				const index:int = layerList.selectedIndex;
				if (index == -1)
				{
					return;
				}
				controller.removeLayer(index);
				layerList.selectedIndex = -1;
				model.activeLayer = null;
			}
			
			protected function onChangeSelection(event:GridSelectionEvent):void
			{
				// TODO Auto-generated method stub
				if (layerList.selectedItem != null)
				{
					model.activeLayer = layerList.selectedItem as IEditableLayer;
				}
				else
				{
					model.activeLayer = null;
				}
			}
			
		]]>
	</fx:Script>
	
	<s:DataGrid id="layerList"
				dataProvider="{model.layers}" 
				width="100%" height="120" rowHeight="20"
				selectionChange="onChangeSelection(event)"
				>
		<s:rowSeparator>
			<fx:Component>
				<s:Rect/>
			</fx:Component>
		</s:rowSeparator>
		<s:columns>
			<s:ArrayList>
				<s:GridColumn 	dataField="type"
								headerText="Layers" 
								sortable="false" 
								itemRendererFunction="getRenderer"
								>
				</s:GridColumn>
			</s:ArrayList>
		</s:columns>
	</s:DataGrid>
	<s:Label text="New layer"/>
	<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle">
		<s:DropDownList id="availableList" 
						dataProvider="{model.availableLayerTypes}" 
						labelField="name"
						width="150"/>
		<s:TextInput id="zIndexInput" text="" 
					 restrict="-[0-9]"
					 widthInChars="5"/>
		<s:Button label="Add" click="onClickAddButton(event)" 
				  enabled="{availableList.selectedIndex != -1 &amp;&amp; zIndexInput.text != ''}"/>
	</s:HGroup>
</s:VGroup>
